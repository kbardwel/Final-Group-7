set.seed(471); sample(c(0,20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- seq(from=20,to=0, by=21)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- seq(from=20,to=0, length=21)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#set.seed(471); sample(...)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob))
#set.seed(471); sample(...)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:21),size = 1, replace = FALSE, prob = sample.prob)
#set.seed(471); sample(...)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
sample(c(0:20), size=1, replace = FALSE, prob = sample.prob)
#set.seed(471); sample(...)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#9
set.seed(2020); sample(...)
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0, length=21), prob= .5)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- seq(from=20,to=0, length=21)
set.seed(471); sample(c(0:20),size = 21, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#9
set.seed(2020); sample(c(0:20),size = 1, prob = sample.prob)
#set.seed(471); sample(...)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0, length=21))
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#set.seed(471); sample(...)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0))
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#set.seed(471); sample(...)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0, length=21)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0, length=21)
sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#11
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE)
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = seq(from=20,to=0,length=21))
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = seq(from=20,to=0))
## ----Example - nametag matching---------------------------------------------------------------------------------------------
set.seed(1116); tags <- sample(1:20,size=20,replace=FALSE)
## ----Logical conditions and the mean function-------------------------------------------------------------------------------
x <- c(1,3,5,6,3,8,10,15,3,2)
## ----Example - nametag matching---------------------------------------------------------------------------------------------
set.seed(1116); tags <- sample(1:20,size=20,replace=FALSE)
## ----Example - nametag matching---------------------------------------------------------------------------------------------
set.seed(1116); tags <- sample(1:20,size=20,replace=FALSE)
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0, length=20)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = seq(from=20,to=0))
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = seq(from=20,to=0))
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0, length=20)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = )
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
sample(c(0:12,size=1, replace= FALSE, prob= .15)
set.seed(5845); sample(c(0:12,size=12, replace= FALSE, prob= .15)  #Results of each of 12 surveys
set.seed(5845); sample(c(0:12),size=12, replace= FALSE, prob= .15)  #Results of each of 12 surveys
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob )
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0, length=20)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob )
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0, length=20)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=20,to=0, length=21)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- seq(from=20,to=0, length=21)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE, prob= sample.prob)
set.seed(5845); sample(c(0:1),size=12, replace= TRUE, prob= c(.85,.15)  #Results of each of 12 surveys
set.seed(5845); sample(c(0:1),size=12, replace= TRUE, prob= c(.85,.15))  #Results of each of 12 surveys
set.seed(5845); sample(c(0:1),size=12, replace= TRUE, prob= c(85,15))  #Results of each of 12 surveys
set.seed(925); sample(c(0:1),size=12, replace= TRUE, prob= c(85,15))  #Results of each of 12 surveys
set.seed(140); sum( sample(c(0:1),size=12, replace= TRUE, prob= c(85,15)) )  #Total surveys completed
# 5
set.seed(5032); sum( sample(c(0:1),size=12, replace= TRUE, prob= c(85,15)) )  #Total surveys completed
ntrials <- 1e5
counter <- 0
for (series in 1:ntrials) {
games <- sample( c(1,0), size=7, replace=TRUE, prob=c(0.65,0.35))
if(sum(games)>=4) { counter <- counter + 1 }
}
counter/ntrials
num.completed <- rep(0,500)
person <- c(0:500)
#Uncomment the 2 lines of code show that you pass the sanity checks!
#head(num.completed)
#[1] 1 5 2 1 1 2
#tail(num.completed)
#[1] 2 2 1 4 1 1
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- seq(from=2,to=0, length=21)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(42069)
sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
(sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(42069)
(sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- seq(from=20,to=0, length=21)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(42069)
(sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- seq(from=20,to=0, length=21)
sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE, prob= sample.prob)
#11
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- seq(from=20,to=0, length=21)
sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE, prob= sample.prob)
#11
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=2,to=0, length=21))
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=2,to=0, length=21))
sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE, prob= sample.prob)
#11
#Uncomment the 3 sanity checks to show your sample command is working.  Obviously, replace sample(...) with your sample command!
sample.prob <- (seq(from=2,to=1, length=21))
sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
set.seed(471); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#0
set.seed(42069); sample(c(0:20),size = 1, replace = FALSE, prob = sample.prob)
#9
set.seed(2020); sample(c(0:20),size = 1, replace = FALSE, prob= sample.prob)
#11
num.completed <- rep(0,500)
person <- c(0:500)
open.spots <- sample(c(0:500), size = 10, replace = FALSE)
#Uncomment the following 3 lines, replacing sample(...) with your sample command, to show you pass the sanity check.
set.seed(2021); open.spots <- sample(c(0:500), size = 10, replace = FALSE)
#Uncomment the following 3 lines, replacing sample(...) with your sample command, to show you pass the sanity check.
set.seed(2021); open.spots <- sample(c(0:500), size = num.spots, replace = FALSE)
num.spots <- 10
#Uncomment the following 3 lines, replacing sample(...) with your sample command, to show you pass the sanity check.
set.seed(2021); open.spots <- sample(c(0:500), size = num.spots, replace = FALSE)
set.seed(2021); open.spots <- sample(c(0:500), size = num.spots, replace = FALSE)
open.spots <- sort(open.spots)
open.spots
num.spots <- 10
open.spots <- sample(c(0:500), size = 10, replace = FALSE)
#Uncomment the following 3 lines, replacing sample(...) with your sample command, to show you pass the sanity check.
set.seed(2021); open.spots <- sample(c(0:500), size = num.spots, replace = FALSE)
open.spots <- sort(open.spots)
open.spots
#[1]  70 166 192 231 251 391 396 422 430 442   #No spots next to each other; we can't park!
num.spots <- 20
#Uncomment the following 3 lines, replacing sample(...) with your sample command, to show you pass the sanity check.
set.seed(9112); open.spots <- sample(c(0:500), size = 10, replace = FALSE)
open.spots <- sort(open.spots)
open.spots
#[1]  11  26  30 122 204 212 225 262 289 322 323 331 346 419 450 475 482 489 490 494  #Ooooo spots 489 and 490 open; we can park!
#Leave this as-is.
knitr::opts_chunk$set(echo = TRUE,collapse=TRUE)
if( as.numeric( paste( unlist( strsplit( paste(R.Version()$major,R.Version()$minor,sep="."),split="\\.") ),collapse="") ) < 411 ) {
stop("You must have R version 4.1.1 or later to knit this document")}
RNGversion("4.1.1")
ntrials <- 500000
n.correct <- rep(0,ntrials)
sample(ntrials, size = 20, replace = TRUE, prob = n.correct)
sample(ntrials, size = 20, replace = FALSE, prob = n.correct)
sample(c(1:20), size = ntrials, replace = FALSE, prob = n.correct)
mean(sample(c(1:20), size = ntrials, replace = FALSE, prob = n.correct))
mean(sample(ntrials, size = 20, replace = FALSE, prob = n.correct))
mean(sample(ntrials, size = 20, replace = FALSE))
mean(sample(n.correct, size = 20, replace = FALSE))
ntrials <- 500000
n.correct <- rep(0,ntrials)
for (i in 1:ntrials) {
picked <- sample(c(0:20), size = 20, replace = TRUE, prob = NULL)
n.correct <- sum(picked)
}
mean(n.correct)
ntrials <- 500000
n.correct <- rep(0,ntrials)
for (i in 1:ntrials) {
picked <- sample(c(0:100), size = 20, replace = TRUE, prob = NULL)
n.correct <- sum(picked)
}
mean(n.correct)
counter <- 0
ntrials <- 500000
n.correct <- rep(0,ntrials)
counter <- 0
for (i in 1:ntrials) {
n.correct <- sample(c(0:100), size = 20, replace = TRUE, prob = NULL)
counter + sum(n.correct)
}
mean(n.correct)
ntrials <- 500000
n.correct <- rep(0,ntrials)
counter <- 0
for (i in 1:ntrials) {
n.correct <- sample(c(0:100), size = 20, replace = TRUE, prob = NULL)
(counter + sum(n.correct))/20
}
mean(n.correct)
ntrials <- 500000
n.correct <- rep(0,ntrials)
counter <- 0
for (i in 1:ntrials) {
n.correct[i] <- sample(c(0:100), size = 20, replace = FALSE, prob = NULL)
(counter + sum(n.correct))/20
}
ntrials <- 500000
n.correct <- rep(0,ntrials)
counter <- 0
for (i in 1:ntrials) {
n.correct[i] <- sample(c(0:100), size = 20, replace = FALSE, prob = NULL)
total <- (counter + sum(n.correct))/20
}
ntrials <- 500000
n.correct <- rep(0,ntrials)
ntrials
counter <- 0
ntrials <- 500000
n.correct <- rep(0,ntrials)
counter <- 0
for (i in 1:ntrials) {
n.correct[i] <- sample(c(1:100), size = 20, replace = FALSE, prob = NULL)
total <- (counter + sum(n.correct))/20
}
pA <- 3/8 #calculate proportions of each class
pB <- 5/8
g <- 1- pA^2 - pB^2 #Gini
g
pA <- 2/3; pB <- 1/3 #calculate proportions and Gini index of "left" partition
g1 <- 1- pA^2 - pB^2
pA <- 1/5; pB <- 4/5 #calculate proportions and Gini index of "right" partition
g2 <- 1- pA^2 - pB^2
w1 <- 3/8; w2 <- 5/8
g.rating <- w1*g1 + w2*g2 #Gini of split is weighted sum of gini inidices of resulting partitions
g.rating
g-g.rating #reduction in Gini
#Splitting Male vs. Female
pA <- 2/4; pB <- 2/4 #calculate proportions and Gini index of Male partition
g1 <- 1- pA^2 - pB^2
pA <- 1/4; pB <- 3/4 #calculate proportions and Gini index of Female partition
g2 <- 1- pA^2 - pB^2
w1 <- 4/8; w2 <- 4/8
g.gender <- w1*g1 + w2*g2 #Gini of split is weighted sum of gini inidices of resulting partitions
g.gender
g-g.gender #reduction in Gini
fitControl <- trainControl(method="cv",number=5,classProbs=TRUE)
data(CHURN)
library(regclass)
library(regclass); data(CHURN)
fitControl <- trainControl(method="cv",number=5,classProbs=TRUE)
library(regclass); data(CHURN)
fitControl <- trainControl(method="cv",number=5,classProbs=TRUE)
#Leave this as-is.
knitr::opts_chunk$set(echo = TRUE,collapse=TRUE)
if( as.numeric( paste( unlist( strsplit( paste(R.Version()$major,R.Version()$minor,sep="."),split="\\.") ),collapse="") ) < 411 ) {
stop("You must have R version 4.1.1 or later to knit this document")}
RNGversion("4.1.1")
library(regclass)
data("CUSTLOYALTY")
library(regclass)
data("CUSTLOYALTY")
table(CUSTLOYALTY$Married)
hist(CUSTLOYALTY$FirstPurchase)
correct <- sample(1:10)  #Correct sequence picked at random
correct
subject <- sample(1:10)  #Sequence chosen by subject when Ho is true (subject randomly guessing)
subject
correct==subject
sum(correct==subject) #number of correct guesses!
94000*94000
-310000000+(94000*94000)
-310000000+(94000*4001)
(-310000000+(94000*4001))-(94000*1)
(-310000000+(94000*4001))-(94000*4000)
(-310000000+(94000*4001))-(-310000000+(94000*4000)
(-310000000+(94000*4001))-(-310000000+(94000*4000)
(-310000000+(94000*4001))-(-310000000+(94000*4000)
(-310000000+(94000*4001))-(-310000000+(94000*4000))
54-67
79-54
70-54
9-16
54-67
13/5
16/7
53-67
14/5
97+47
library(fpp3)
credit <- read.csv('credit (1).csv')
credit$year_month <- credit$ï..year_month
credit$ï..year_month <- NULL
credit$year_month <- yearmonth(credit$year_month)
setwd("~/TR-BAS 475/GitHub/Final-Group-7")
credit <- read.csv('credit (1).csv')
credit$year_month <- credit$ï..year_month
credit$ï..year_month <- NULL
credit$year_month <- yearmonth(credit$year_month)
credit <- as_tsibble(credit, index = year_month)
autoplot(credit, credit_in_millions)
gg_season(credit, credit_in_millions)
gg_subseries(credit, credit_in_millions)
gg_lag(credit, credit_in_millions, geom = "point")
credit %>% features(credit_in_millions, feat_acf)
train <- head(credit, nrow(credit) - 12)
test <- tail(credit, 12)
train %>%
stretch_tsibble(.init = 24, .step = 20) %>%
model(
arima = ARIMA(credit_in_millions),
ets = ETS(credit_in_millions),
nnet = NNETAR(credit_in_millions),
tslm = TSLM(credit_in_millions ~ trend()),
tslmseason = TSLM(credit_in_millions ~ trend() + season()),
seasonal_naive = SNAIVE(credit_in_millions ~ lag("month") + drift())
)
fit %>%
forecast(h = 12, times = 200) %>%
accuracy(train) %>%
arrange(RMSE)
fit <- train %>%
stretch_tsibble(.init = 24, .step = 20) %>%
model(
arima = ARIMA(credit_in_millions),
ets = ETS(credit_in_millions),
nnet = NNETAR(credit_in_millions),
tslm = TSLM(credit_in_millions ~ trend()),
tslmseason = TSLM(credit_in_millions ~ trend() + season()),
seasonal_naive = SNAIVE(credit_in_millions ~ lag("month") + drift())
)
fit %>%
forecast(h = 12, times = 200) %>%
accuracy(train) %>%
arrange(RMSE)
fit %>%
forecast(test, times = 100) %>%
autoplot(test)
fit %>%
forecast(test, times = 100) %>%
autoplot(credit)
fit <- train %>%
model(ARIMA(credit_in_millions))
report(fit)
gg_tsresiduals(fit)
fit %>%
forecast(test, times = 100) %>%
autoplot(test)
fit %>%
forecast(test, times = 100) %>%
autoplot(credit)
predictions <- fit %>%
forecast(test, times = 100)
y_pred <- predictions$.mean
rmse <- function(y_actual, y_pred) {
sqrt(mean((y_actual - y_pred)^2))
}
mape <- function(y_actual, y_pred) {
mean(abs(y_actual - y_pred) / y_actual)
}
rmse(y_pred, test$credit_in_millions)
mape(y_pred, test$credit_in_millions)
write.csv(predictions, "predictions.csv")
# Chunk 1
library(fpp3)
# Chunk 2
credit <- read.csv('credit (1).csv')
credit$year_month <- credit$ï..year_month
credit$ï..year_month <- NULL
credit$year_month <- yearmonth(credit$year_month)
# Chunk 3
credit <- as_tsibble(credit, index = year_month)
autoplot(credit, credit_in_millions) +
labs(y = "Galactic Credit (in millions)", x = "Year Month Date", title = "Galactic Credit")
# Chunk 4
gg_season(credit, credit_in_millions)
gg_subseries(credit, credit_in_millions)
gg_lag(credit, credit_in_millions, geom = "point")
credit %>% features(credit_in_millions, feat_acf)
train <- head(credit, nrow(credit) - 12)
test <- tail(credit, 12)
train %>%
model(stl = STL(credit_in_millions)) %>%
components() %>%
autoplot()
fit <- train %>%
model(ARIMA(credit_in_millions, stepwise = FALSE))
report(fit)
gg_tsresiduals(fit)
fit %>%
forecast(test, times = 100) %>%
autoplot(test) +
labs(title = "12 Month Forecast", y = "Galactic Credit (in millions)", x = "Year Month Date")
fit %>%
forecast(test, times = 100) %>%
autoplot(credit)
fit %>%
forecast(test, times = 100) %>%
autoplot(test) +
labs(title = "12 Month Forecast", y = "Galactic Credit (in millions)", x = "Year Month Date")
fit %>%
forecast(test, times = 100) %>%
autoplot(credit)
fit %>%
forecast(test, times = 100) %>%
autoplot(test) +
labs(title = "12 Month Forecast", y = "Galactic Credit (in millions)", x = "Year Month Date")
fit %>%
forecast(test, times = 100) %>%
autoplot(credit)
predictions <- fit %>%
forecast(test, times = 100)
y_pred <- predictions$.mean
rmse <- function(y_actual, y_pred) {
sqrt(mean((y_actual - y_pred)^2))
}
mape <- function(y_actual, y_pred) {
mean(abs(y_actual - y_pred) / y_actual)
}
rmse(y_pred, test$credit_in_millions)
mape(y_pred, test$credit_in_millions)
fit %>%
forecast(h =12)
fit <- credit %>%
model(ARIMA(credit_in_millions, stepwise = FALSE))
fit %>%
forecast(h =12)
fit %>%
forecast(h =12) %>%
autoplot()
fit %>%
forecast(h =12) %>%
autoplot(credit)
fit %>%
forecast(credit, h =12) %>%
autoplot(credit)
fit %>%
forecast(h =12)
prediction <- fit %>%
forecast(h =12)
prediction
prediction$.mean
write.csv(prediction$.mean, "predictions.csv", row.names = FALSE)
